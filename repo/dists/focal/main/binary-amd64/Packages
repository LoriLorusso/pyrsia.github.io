Package: pyrsia
Version: 0.1.0+846
Architecture: amd64
Vcs-Browser: https://github.com/pyrsia/pyrsia
Vcs-Git: https://github.com/pyrsia/pyrsia
Maintainer: pyrsiaoss <pyrsiaopensource@gmail.com>
Installed-Size: 16019
Depends: openssl, synapse-bt
Priority: optional
Section: devel
Filename: pool/main/p/pyrsia/pyrsia_0.1.0+846_amd64.deb
Size: 4715200
SHA256: f71fd564ae4cacd33b84d7aea0db7b70336df77f58a3a3d67f2202e557aa21eb
SHA1: 5639bd28a7aeb7d7d604e56c6c0a0b768a1777d4
MD5sum: c254cda0984daf432d2182f1d981f692
Description: Prysia Node and CLI
 ![logo](https://raw.githubusercontent.com/pyrsia/.github/main/images/logo-color.svg)
 .
 > Zero-Trust Decentralized Package Network
 .
 ## Current Development Phase
 .
 _📢 We are looking for your feedback!_
 .
 This project is currently in the "sandbox" 🏖️. We are actively exploring
 new concepts and tools.
 The code, workflows, and ideas are subject to breaking changes at any time in
 this early stage of development.
 .
 ### Primary Focus
 .
 To get off the ground the focus is strictly on the peer-to-peer distribution of
 Docker images backed by a blockchain of identifiers.
 .
 ## Contributing
 .
 Before getting started, take a moment to review our [contributing
 guidelines](https://github.com/pyrsia/.github/blob/main/contributing.md).
 .
 ## Node and CLI
 .
 There are two components of this project
 .
 - **[CLI](pyrsia_cli/)**: A basic interface which communicates with a node.
 - **[Node](pyrsia_node/)**: An instance of the Pyrsia daemon which can
 participate in the network with other nodes.
 .
 ### Getting Started
 .
 For now Pyrsia only supports Docker artifacts. Follow these steps to run a
 Pyrsia node and use it as the registry for all Docker Hub content.
 .
 1. Setup rust on your local machine as described in [Rust's getting started
 guide](https://www.rust-lang.org/learn/get-started)
 2. Clone this repo `git clone https://github.com/pyrsia/pyrsia.git`
 3. `cd pyrsia/pyrsia_node`
 4. You need to start the Pyrsia Node. To do so, you have 2 options:
    - regular build: `DEV_MODE=on PYRSIA_ARTIFACT_PATH=pyrsia cargo run`
    - build in docker: `docker-compose up --build`
 .
 *Note*: Do not to stop this process, a running node is required for the 
 following steps:
 .
 5. **configure Docker** to use Pyrsia, which is running on localhost port 7888\
     open your Docker daemon settings and add this entry in the root JSON
 object:
 .
     **On Linux platforms**:
 .
     ```
       "registry-mirrors": ["http://localhost:7888"]
     ```
     By default you can find the Docker daemon settings here
 `/etc/docker/daemon.json`.
 .
     **On other platforms**:
 .
     You can find the Docker daemon settings in Docker Desktop -> Preferences ->
 Docker Engine.
 .
     If you're running Pyrsia inside Docker, the `registry-mirrors` settings can
 be set to `http://localhost:7888` as well. However if you're not running inside
 Docker, you cannot use `localhost` because localhost will point to the Docker
 Desktop VM. Instead you have to use the hostname of your host machine. If you
 don't know/have that, you can add this to `/etc/hosts` (on Mac) or
 `c:\windows\system32\drivers\etc\hosts` (on Windows):
 .
     ```
     127.0.0.1       my-pyrsia-host
     ```
 .
     And then use that name in the Docker configuration file like this:
     ```
     "registry-mirrors": ["http://my-pyrsia-host:7888"]
     ```
 .
 6. using another terminal, use `docker` to pull an image from Pyrsia:
     ```
     docker pull ubuntu
     ```
    (or pull any other Docker image of your choice)
 .
     Optionally, you can inspect the Pyrsia node logs to check where the image
 came from. This can be either:
     - locally (if it was cached by Pyrsia before)
     - from the Pyrsia network
     - or from Docker Hub (if it wasn't previously available in the Pyrsia
 network)
 .
 .
 7. Build the CLI tool
    ```
    cd ../pyrsia_cli
    cargo build
    cd ../target/debug
    ```
 .
 8. Configure the CLI tool
     ```
     ./pyrsia config --add localhost:7888
     ```
 .
 9. Ping the Pyrsia node and list the status
     ```
     ./pyrsia node -p
     Connection Successfull !! {}
     ```
 .
     ```
     ./pyrsia node -s
     Connected Peers Count:   0
     Artifacts Count:         12 # reflects the number of artifacts that the
 pyrsia_node has stored on the network
     Total Disk Available:    983112
     ```
 .
 If you see a status message similar to 
    ```
 Error: error sending request for url (http://localhost:7888/v2): error trying
 to connect: tcp connect error: Connection refused (os error 111)
    ```
 then your node is not running. Go back to step 3 to make sure
 the Pyrsia node is running.
 .
 10. Multiple Pyrsia nodes can be started on the same computer by changing the
 ports they use as follows
 .
     ```
     DEV_MODE=on PYRSIA_ARTIFACT_PATH=pyrsia cargo run --bin pyrsia_node -- -p
 7888
 .
     # RUST_LOG=debug DEV_MODE=on PYRSIA_ARTIFACT_PATH=pyrsia cargo run --bin
 pyrsia_node -- -p 7888 # Use this environment variable if you would like to see
 debug logs
     ```
 .
     ```
     DEV_MODE=on PYRSIA_ARTIFACT_PATH=pyrsia cargo run --bin pyrsia_node -- -p
 8181
 .
     # RUST_LOG=debug DEV_MODE=on PYRSIA_ARTIFACT_PATH=pyrsia cargo run --bin
 pyrsia_node -- -p 8181 # Use this environment variable if you would like to see
 debug logs
     ```
 .
     ```
     ./pyrsia node -s
     Connected Peers Count:   1 # Shows the additional node that joined the list
 of peers
     Artifacts Count:         12
     Total Disk Available:    983112
     ```
 .
     In a real life deployment these nodes will be spread over the network and
 will all run on their own 7888 port.
     `Word of caution: Running the peers for a few hours does generate network
 traffic and hence can drain your computer power. Ensure you are plugged into
 power if you are running multiple peers for a long time`
 .
     To test the pyrsia_node status you can use `curl`  and
     ```
     curl --location --request GET 'http://localhost:7888/status'
     ```
 .
 .
 .
 ### Setting Up Visual Studio Code Debugger
 .
 [How to Debug Rust with Visual Studio
 Code](https://www.forrestthewoods.com/blog/how-to-debug-rust-with-visual-studio-code/)
 .
 ### Building and running the Pyrsia Node with Docker
 .
 1. Install [Docker](https://www.docker.com/get-started)
 2. Run `docker compose up`
     * macOS and Windows: Compose is included in Docker Desktop
     * Linux: [Downloaded Compose](https://github.com/docker/compose#linux)
 .
 The Pyrsia node will then be running on localhost:7888 both on the host and
 inside the VM, available to Docker Engine, in the case of Docker Desktop.

Package: synapse-bt
Version: 1.0.0+837
Architecture: amd64
Vcs-Browser: https://github.com/pyrsia/synapse
Vcs-Git: https://github.com/pyrsia/synapse
Maintainer: Luminarys <postmaster@gensok.io>
Installed-Size: 10609
Depends: libc6 (>= 2.18), libc6 (>= 2.29)
Priority: optional
Section: devel
Filename: pool/main/s/synapse-bt/synapse-bt_1.0.0+837_amd64.deb
Size: 2427200
SHA256: 4197f1adffc2f96d1be0169b350b4c5a270aa5cf455fa0d6c344432353921d02
SHA1: 47bfa98c49d30b24b6bcd4f36e2249ec9c42b74b
MD5sum: 7d1dddd476887b4232901cf04a0ae1a0
Description: Synapse BitTorrent client
 # synapse
 [![Rust
 Build](https://github.com/Luminarys/synapse/actions/workflows/rust.yml/badge.svg)](https://github.com/Luminarys/synapse/actions/workflows/rust.yml)
 .
 .
 Synapse is a flexible and fast BitTorrent daemon.
 .
 It currently supports most systems which implement epoll or kqueue, with a
 focus on 64-bit linux servers.
 .
 ## About
 * Event based RPC using websockets
 * HTTP downloads and TLS for easy server usage
 * Can be used via web client with minimal setup - see
 [receptor](https://web.synapse-bt.org)
 * See [this wiki
 page](https://github.com/Luminarys/synapse/wiki/Feature-Stability) for an
 overview of stability
 .
 ## Installation
 ### Package
 A list of packages can be found on [this wiki
 page](https://github.com/Luminarys/synapse/wiki/Third-party-packages).
 .
 ### Compiling
 Install dependencies:
 .
 - rustc >= 1.39.0
 - cargo >= 0.18
 - gcc | clang
 .
 Synapse and sycli can be installed with:
 ```
 cargo build --release --all
 cargo install
 cargo install --path ./sycli/
 ```
 .
 If you'd just like to install sycli:
 ```
 cargo build --release -p sycli
 cargo install --path ./sycli/
 ```
 .
 ## Configuration
 Synapse expects its configuration file to be present at
 `$XDG_CONFIG_DIR/synapse.toml`,
 or `~/.config/synapse.toml`.
 If it is not present or invalid, a default configuration will be used.
 These defaults are given in `example_config.toml`.
 .
 Sycli can be configured in a similar manner, using `sycli.toml`.
 .
 ### Desktop application
 .
 Copy [`share/synapse/applications/synapse.desktop`] to
 `$XDG_DATA_HOME/applications` or `~/.local/share/applications`.
 .
 [`share/synapse/applications/synapse.desktop`]:
 share/synapse/applications/synapse.desktop
 .
 [XDG MIME Applications] example configuration:
 .
 `~/.config/mimeapps.list`
 .
 ``` ini
 [Default Applications]
 x-scheme-handler/magnet=synapse.desktop
 ```
 .
 [XDG MIME Applications]:
 https://wiki.archlinux.org/index.php/XDG_MIME_Applications
 .
 ## Development
 Please see [this issue](https://github.com/Luminarys/synapse/issues/1) for
 details on development status.
 If you're interested in developing a client for synapse, see `doc/RPC` for the
 current RPC spec.
 if you'd like to contribute to synapse, see `doc/HACKING`.

